/*
            ____        _          _____                      
            |  _ \  __ _| |_ __ _  |_   _|   _ _ __   ___  ___ 
            | | | |/ _` | __/ _` |   | || | | | '_ \ / _ \/ __|
            | |_| | (_| | || (_| |   | || |_| | |_) |  __/\__ \
            |____/ \__,_|\__\__,_|   |_| \__, | .__/ \___||___/
                                        |___/|_|              
--------------------------------------------------------------------------------
*/

// INTEGER TYPES (UNSINGED)
let _unsigned_number1: u8 = 10;        // (UNSIGNED) 8-BIT INTEGER
let _unsigned_number2: u16 = 100;      // (UNSINGED) 16-BIT INTEGER
let _unsigned_number3: u32 = 1_000;    // (UNSIGNED) 32-BIT INTEGER
let _unsigned_number4: u64 = 10_000;   // (UNSIGNED) 64-BIT INTEGER
let _unsigned_number5: u128 = 100_000; // (UNSIGNED) 128-BIT INTEGER

/*
--------------------------------------------------------------------------------
UNSIGNED INTEGER RANGE:
--------------------------------------------------------------------------------
- u8:    (0 to 255)
- u16:   (0 to 65_535)
- u32:   (0 to 4_294_967_295)
- u64:   (0 to 18_446_744_073_709_551_615)
- u128   (0 to 2^128-1)
--------------------------------------------------------------------------------
*/

// INTEGER TYPES (SIGNED)
let _signed_number1: i8 = 11;        // (SIGNED)   8-BIT INTEGER
let _signed_number2: i16 = 110;      // (SIGNED)  16-BIT INTEGER
let _signed_number3: i32 = 1_100;    // (SIGNED)  32-BIT INTEGER
let _signed_number4: i64 = 11_000;   // (SIGNED)  64-BIT INTEGER
let _signed_number5: i128 = 110_000; // (SIGNED) 128-BIT INTEGER

/*
--------------------------------------------------------------------------------
UNSIGNED INTEGER RANGE:
--------------------------------------------------------------------------------
- i8:    (-128 to 127)
- i16:   (−32_768 to 32_767)
- i32:   (−2_147_483_648 to 2_147_483_647)
- i64:   (−9_223_372_036_854_775_808 to 9_223_372_036_854_775_807)
- i128   (-2^127 to 2^127-1)
--------------------------------------------------------------------------------
*/

// FLOATING POINT TYPES
let _float1: f32 = 100.00;
let _float2: f64 = 10_000.00;

/*
--------------------------------------------------------------------------------
FLOATING POINT RANGE:
--------------------------------------------------------------------------------
- f32:   (-3.4 * 10^38 to +3.4 * 10^38)
- f64:   (-1.8 * 10^308 to +1.8 * 10^308)
--------------------------------------------------------------------------------
*/

/*
--------------------------------------------------------------------------------
DATA TYPE NOTES: 
--------------------------------------------------------------------------------
- A character (char) in Rust is a 32-bit Unicode character.

- 
- f32 have IEEE single precision (>= 6 decimal digits).
- f32 have IEEE double precision (>= 15 decimal digits).
--------------------------------------------------------------------------------
*/